name: Build and Deploy to Server

on:
  push:
    branches: [ main, master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    - name: Install dependencies and build TypeScript
      run: |
        # Install dependencies and build each service
        cd user-service
        npm install
        npm run build
        cd ..
        
        cd claim-service
        npm install
        npm run build
        cd ..
        
        cd hunt-service
        npm install
        npm run build
        cd ..
        
        cd wallet-service
        npm install
        npm run build
        cd ..

    - name: Create deployment package
      run: |
        # Create a clean deployment directory with only compiled JS and necessary files
        mkdir -p deployment-package
        
        # Copy compiled JS and package.json for each service
        cp -r user-service/dist deployment-package/user-service/
        cp user-service/package.json deployment-package/user-service/
        cp user-service/.env deployment-package/user-service/ 2>/dev/null || echo "No .env in user-service"
        
        cp -r claim-service/dist deployment-package/claim-service/
        cp claim-service/package.json deployment-package/claim-service/
        cp claim-service/.env deployment-package/claim-service/ 2>/dev/null || echo "No .env in claim-service"
        
        cp -r hunt-service/dist deployment-package/hunt-service/
        cp hunt-service/package.json deployment-package/hunt-service/
        cp hunt-service/.env deployment-package/hunt-service/ 2>/dev/null || echo "No .env in hunt-service"
        
        cp -r wallet-service/dist deployment-package/wallet-service/
        cp wallet-service/package.json deployment-package/wallet-service/
        cp wallet-service/.env deployment-package/wallet-service/ 2>/dev/null || echo "No .env in wallet-service"
        
        # Copy ecosystem config and deploy script
        cp ecosystem.config.js deployment-package/ 2>/dev/null || echo "No ecosystem.config.js found"
        cp scripts/deploy.sh deployment-package/ 2>/dev/null || echo "No deploy.sh in scripts/"
        
        # Create archive
        tar -czf deployment.tar.gz -C deployment-package .
        
        # Upload deployment package to server
        scp -o StrictHostKeyChecking=no deployment.tar.gz ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/opt/tresurehunt-backend/

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        port: ${{ secrets.PORT }}
        script: |
          # Navigate to application directory
          cd /opt/tresurehunt-backend
          
          # Extract deployment package
          echo "Extracting deployment package..."
          tar -xzf deployment.tar.gz
          rm deployment.tar.gz
          
          # Stop PM2 processes
          pm2 stop all || true
          pm2 delete all || true
          
          # Install dependencies for each service (only production dependencies)
          echo "Installing production dependencies..."
          
          services=("user-service" "claim-service" "hunt-service" "wallet-service")
          
          for service in "${services[@]}"; do
            echo "Installing dependencies for $service..."
            cd $service
            # Only install production dependencies since we already have compiled JS
            npm install --production --omit=dev
            cd ..
          done
          
          # Start services with PM2
          echo "Starting services with PM2..."
          pm2 start ecosystem.config.js
          
          # Save PM2 configuration
          pm2 save
          
          # Setup PM2 startup script
          pm2 startup
          
          echo "Checking service status..."
          pm2 status
          
          echo "Deployment completed successfully!"